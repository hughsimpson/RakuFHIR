use v6.d;
use lib 'lib';

use Test;
use JSON::Fast;

use FHIR::Base;
use FHIR::DomainModel;
use FHIR::JsonSerdes;

constant DEBUG = False;

sub normalise-json(Str $s) {
    my $x = from-json $s.subst( '.000', '');
    # We set ms precision, which isn't in some of the input json, so here we normalise to stop the tests throwing spurious failures on every 'date' field
    to-json :sorted-keys, $x
}

sub test-model(IO::Path $loc) {
    put "looking at {$loc.basename}";
    my Str $slurped = $loc.slurp;
    my Str $normalised = normalise-json $slurped;
    my StructureDefinition() $decoded = $slurped;
    my Str $encoded = normalise-json ~$decoded;
    if $decoded.kind ~~ 'primitive-type' {
        is "", "", "{$loc.basename} skipped, since primitive";
    } else {
        if DEBUG {
            spurt "encoded.json", $encoded;
            spurt "orig.json", $normalised;
            is qx`jd orig.json encoded.json`, "", "{$loc.basename} works";
        } else {
            is $encoded, $normalised, "{$loc.basename} works";
        }
    }
    #    is $encoded, $normalised;
}

put 'loading defs';
my IO::Path @models = grep { /.+ '.json'$/ }, |'./t/resources/structureDefinition'.IO.dir;

my Int $max-tests = %*ENV<MAX_JSON_TESTS> // +@models;
@models = @models[0..^$max-tests];

put "prepped for {+@models} models";

plan +@models;

my $start = now;

if DEBUG { *.&test-model for @models }
else { race for @models { test-model $_ } }

my $end = now;

put "Done in {$end - $start}s";

done-testing;
